{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-ec4d741b14d6658df0a0b4264f8092bf4fd54afd",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/TestToken.sol": "project/contracts/TestToken.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/TestToken.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/**\n * @title TestToken\n * @notice A basic ERC-20 token implementation with enhanced security features\n * @dev Implements standard ERC-20 functions with custom errors for gas efficiency\n */\ncontract TestToken {\n  /// @notice The name of the token\n  string public name = 'D1A';\n\n  /// @notice The symbol of the token\n  string public symbol = 'D1A';\n\n  /// @notice The number of decimals the token uses\n  uint8 public decimals = 18;\n\n  /// @notice The total supply of tokens\n  uint256 public totalSupply;\n\n  /// @notice Mapping from address to token balance\n  mapping(address => uint256) public balanceOf;\n\n  /// @notice Mapping from owner to spender to approved amount\n  /// @dev allowance[owner][spender] = amount\n  mapping(address => mapping(address => uint256)) public allowance;\n\n  /// @notice Emitted when tokens are transferred from one address to another\n  /// @param from The address tokens are transferred from\n  /// @param to The address tokens are transferred to\n  /// @param amount The amount of tokens transferred\n  event Transfer(address indexed from, address indexed to, uint256 indexed amount);\n\n  /// @notice Emitted when an approval is granted or modified\n  /// @param owner The address granting the approval\n  /// @param spender The address receiving the approval\n  /// @param amount The amount of tokens approved\n  event Approval(address indexed owner, address indexed spender, uint256 indexed amount);\n\n  /// @notice Thrown when an account has insufficient balance for an operation\n  /// @param available The actual balance available\n  /// @param required The required balance for the operation\n  error InsufficientBalance(uint256 available, uint256 required);\n\n  /// @notice Thrown when an account has insufficient allowance for an operation\n  /// @param available The actual allowance available\n  /// @param required The required allowance for the operation\n  error InsufficientAllowance(uint256 available, uint256 required);\n\n  /// @notice Thrown when attempting to interact with the zero address\n  error ZeroAddressNotAllowed();\n\n  /// @notice Thrown when an allowance increase would cause an overflow\n  error AllowanceOverflow();\n\n  /**\n   * @notice Creates a new TestToken with an initial supply\n   * @param _initialSupply The initial supply of tokens (will be multiplied by 10^decimals)\n   * @dev The entire supply is minted to the contract deployer\n   */\n  constructor(uint256 _initialSupply) {\n    totalSupply = _initialSupply * 10 ** uint256(decimals);\n    balanceOf[msg.sender] = totalSupply;\n    emit Transfer(address(0), msg.sender, totalSupply);\n  }\n\n  /**\n   * @notice Transfers tokens from the caller's account to another address\n   * @param _to The address to transfer tokens to\n   * @param _amount The amount of tokens to transfer\n   * @return success True if the transfer was successful\n   * @dev Reverts if recipient is zero address or sender has insufficient balance\n   */\n  function transfer(address _to, uint256 _amount) public returns (bool success) {\n    if (_to == address(0)) {\n      revert ZeroAddressNotAllowed();\n    }\n\n    if (balanceOf[msg.sender] < _amount) {\n      revert InsufficientBalance(balanceOf[msg.sender], _amount);\n    }\n\n    balanceOf[msg.sender] -= _amount;\n    balanceOf[_to] += _amount;\n\n    emit Transfer(msg.sender, _to, _amount);\n    return true;\n  }\n\n  /**\n   * @notice Approves a spender to spend tokens on behalf of the caller\n   * @param _spender The address authorized to spend tokens\n   * @param _amount The amount of tokens approved for spending\n   * @return success True if the approval was successful\n   * @dev Reverts if spender is zero address\n   * @dev Warning: Changing an allowance with this method has race condition risk.\n   *      Consider using increaseAllowance or decreaseAllowance instead.\n   */\n  function approve(address _spender, uint256 _amount) public returns (bool success) {\n    if (_spender == address(0)) {\n      revert ZeroAddressNotAllowed();\n    }\n\n    allowance[msg.sender][_spender] = _amount;\n\n    emit Approval(msg.sender, _spender, _amount);\n    return true;\n  }\n\n  /**\n   * @notice Transfers tokens from one address to another using an allowance\n   * @param _from The address to transfer tokens from\n   * @param _to The address to transfer tokens to\n   * @param _amount The amount of tokens to transfer\n   * @return success True if the transfer was successful\n   * @dev Requires the caller to have sufficient allowance from the _from address\n   * @dev Reverts if sender or recipient is zero address, insufficient balance, or insufficient allowance\n   * @dev The allowance is decreased by the transfer amount\n   */\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n    if (_from == address(0) || _to == address(0)) {\n      revert ZeroAddressNotAllowed();\n    }\n\n    if (balanceOf[_from] < _amount) {\n      revert InsufficientBalance(balanceOf[_from], _amount);\n    }\n\n    if (allowance[_from][msg.sender] < _amount) {\n      revert InsufficientAllowance(allowance[_from][msg.sender], _amount);\n    }\n\n    balanceOf[_from] -= _amount;\n    balanceOf[_to] += _amount;\n    allowance[_from][msg.sender] -= _amount;\n\n    emit Transfer(_from, _to, _amount);\n    return true;\n  }\n\n  /**\n   * @notice Atomically increases the allowance granted to a spender\n   * @param _spender The address whose allowance will be increased\n   * @param _addedAmount The amount to add to the current allowance\n   * @return success True if the operation was successful\n   * @dev This is a safer alternative to approve() that prevents race conditions\n   * @dev Reverts if spender is zero address or if the operation would cause an overflow\n   */\n  function increaseAllowance(address _spender, uint256 _addedAmount) public returns (bool success) {\n    if (_spender == address(0)) {\n      revert ZeroAddressNotAllowed();\n    }\n\n    uint256 currentAllowance = allowance[msg.sender][_spender];\n    uint256 newAllowance = currentAllowance + _addedAmount;\n\n    if (newAllowance < currentAllowance) {\n      revert AllowanceOverflow();\n    }\n\n    allowance[msg.sender][_spender] = newAllowance;\n\n    emit Approval(msg.sender, _spender, newAllowance);\n    return true;\n  }\n\n  /**\n   * @notice Atomically decreases the allowance granted to a spender\n   * @param _spender The address whose allowance will be decreased\n   * @param _subtractedAmount The amount to subtract from the current allowance\n   * @return success True if the operation was successful\n   * @dev This is a safer alternative to approve() that prevents race conditions\n   * @dev Reverts if spender is zero address or if the current allowance is less than the subtracted amount\n   */\n  function decreaseAllowance(\n    address _spender,\n    uint256 _subtractedAmount\n  ) public returns (bool success) {\n    if (_spender == address(0)) {\n      revert ZeroAddressNotAllowed();\n    }\n\n    uint256 currentAllowance = allowance[msg.sender][_spender];\n\n    if (currentAllowance < _subtractedAmount) {\n      revert InsufficientAllowance(currentAllowance, _subtractedAmount);\n    }\n\n    allowance[msg.sender][_spender] = currentAllowance - _subtractedAmount;\n\n    emit Approval(msg.sender, _spender, currentAllowance - _subtractedAmount);\n    return true;\n  }\n\n  /**\n   * @notice Retrieves account balance and total supply information\n   * @param _owner The address to query the balance of\n   * @return balance The token balance of the specified address\n   * @return supply The total supply of tokens\n   * @dev This is a convenience function that returns both values in a single call\n   */\n  function getAccountInfo(address _owner) public view returns (uint256 balance, uint256 supply) {\n    return (balanceOf[_owner], totalSupply);\n  }\n}\n"
      }
    }
  }
}